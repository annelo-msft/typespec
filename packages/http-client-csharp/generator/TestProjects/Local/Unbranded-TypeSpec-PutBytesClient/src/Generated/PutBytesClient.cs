// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;
using PutBytes.Models;

namespace PutBytes
{
    /// <summary></summary>
    public partial class PutBytesClient
    {
        private readonly Uri _endpoint;
        private PutBytesClient _cachedPutBytesClient;

        /// <summary> Initializes a new instance of PutBytesClient for mocking. </summary>
        protected PutBytesClient()
        {
        }

        internal PutBytesClient(ClientPipeline pipeline, Uri endpoint)
        {
            _endpoint = endpoint;
            Pipeline = pipeline;
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public ClientPipeline Pipeline { get; }

        /// <summary>
        /// [Protocol Method] Upload
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult Upload(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUploadRequest(content, options);
            return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
        }

        /// <summary>
        /// [Protocol Method] Upload
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> UploadAsync(BinaryContent content, RequestOptions options)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateUploadRequest(content, options);
            return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary> Upload. </summary>
        /// <param name="document"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="document"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual ClientResult Upload(BinaryData document)
        {
            Argument.AssertNotNull(document, nameof(document));

            UploadRequest spreadModel = new UploadRequest(document, null);
            return Upload(spreadModel, null);
        }

        /// <summary> Upload. </summary>
        /// <param name="document"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="document"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        public virtual async Task<ClientResult> UploadAsync(BinaryData document)
        {
            Argument.AssertNotNull(document, nameof(document));

            UploadRequest spreadModel = new UploadRequest(document, null);
            return await UploadAsync(spreadModel, null).ConfigureAwait(false);
        }

        /// <summary> Initializes a new instance of PutBytesClient. </summary>
        public virtual PutBytesClient GetPutBytesClient()
        {
            return Volatile.Read(ref _cachedPutBytesClient) ?? Interlocked.CompareExchange(ref _cachedPutBytesClient, new PutBytesClient(Pipeline, _endpoint), null) ?? _cachedPutBytesClient;
        }
    }
}
