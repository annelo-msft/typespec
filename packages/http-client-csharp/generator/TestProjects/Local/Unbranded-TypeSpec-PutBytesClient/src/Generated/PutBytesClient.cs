// <auto-generated/>

#nullable enable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace PutBytes;

/// <summary>.NET client for communicating with the PutBytes service.</summary>
public partial class PutBytesClient
{
    private readonly Uri _endpoint;
    private readonly ClientPipeline _pipeline;

    /// <summary> Creates a new instance of PutBytesClient for mocking. </summary>
    protected PutBytesClient()
    {
        _endpoint = default!;
        _pipeline = default!;
    }

    /// <summary>
    /// Creates a new instance of <see cref="PutBytesClient"/>.
    /// </summary>
    /// <param name="endpoint">The service endpoint.</param>
    /// <param name="options">Options to configure the client.</param>
    public PutBytesClient(Uri endpoint, PutBytesClientOptions? options = default)
    {
        Argument.AssertNotNull(endpoint, nameof(endpoint));

        options ??= new PutBytesClientOptions();

        _endpoint = endpoint;
        _pipeline = ClientPipeline.Create(options);
    }

    /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
    public ClientPipeline Pipeline => _pipeline;

    /// <summary>
    /// [Protocol Method] Upload
    /// <list type="bullet">
    /// <item>
    /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
    /// </item>
    /// </list>
    /// </summary>
    /// <param name="content"> The content to send as the body of the request. </param>
    /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    /// <returns> The response returned from the service. </returns>
    public virtual ClientResult Upload(BinaryContent content, RequestOptions? options = default)
    {
        Argument.AssertNotNull(content, nameof(content));

        using PipelineMessage message = CreateUploadRequest(content, options);
        return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
    }

    /// <summary>
    /// [Protocol Method] Upload
    /// <list type="bullet">
    /// <item>
    /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
    /// </item>
    /// </list>
    /// </summary>
    /// <param name="content"> The content to send as the body of the request. </param>
    /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    /// <returns> The response returned from the service. </returns>
    public virtual async Task<ClientResult> UploadAsync(BinaryContent content, RequestOptions? options = default)
    {
        Argument.AssertNotNull(content, nameof(content));

        using PipelineMessage message = CreateUploadRequest(content, options);
        return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
    }

    /// <summary> Upload. </summary>
    /// <param name="document"></param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="document"/> is null. </exception>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    public virtual ClientResult Upload(BinaryData document, CancellationToken cancellationToken = default)
    {
        Argument.AssertNotNull(document, nameof(document));

        BinaryContent content = BinaryContent.Create(document);
        return Upload(content, cancellationToken.ToRequestOptions());
    }

    /// <summary> Upload. </summary>
    /// <param name="document"></param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <exception cref="ArgumentNullException"> <paramref name="document"/> is null. </exception>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    public virtual async Task<ClientResult> UploadAsync(BinaryData document, CancellationToken cancellationToken = default)
    {
        Argument.AssertNotNull(document, nameof(document));

        BinaryContent content = BinaryContent.Create(document);
        return await UploadAsync(content, cancellationToken.ToRequestOptions()).ConfigureAwait(false);
    }
}
