// <auto-generated/>

#nullable enable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading;
using System.Threading.Tasks;

namespace SimplePost;

/// <summary>.NET client for communicating with the SimplePost service.</summary>
public partial class SimplePostClient
{
    private readonly Uri _endpoint;
    private readonly ClientPipeline _pipeline;

    /// <summary> Creates a new instance of <see cref="SimplePostClient"/> for mocking. </summary>
    protected SimplePostClient()
    {
        _endpoint = default!;
        _pipeline = default!;
    }

    /// <summary>
    /// Creates a new instance of <see cref="SimplePostClient"/>.
    /// </summary>
    /// <param name="endpoint">The service endpoint.</param>
    /// <param name="options">Options to configure the client.</param>
    public SimplePostClient(Uri endpoint, SimplePostClientOptions? options = default)
    {
        Argument.AssertNotNull(endpoint, nameof(endpoint));

        options ??= new SimplePostClientOptions();

        _endpoint = endpoint;
        _pipeline = ClientPipeline.Create(options);
    }

    /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
    public ClientPipeline Pipeline => _pipeline;

    /// <summary>
    /// [Protocol Method] IncrementCount
    /// <list type="bullet">
    /// <item>
    /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
    /// </item>
    /// </list>
    /// </summary>
    /// <param name="addend"></param>
    /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    /// <returns> The response returned from the service. </returns>
    public virtual ClientResult IncrementCount(int addend, RequestOptions? options)
    {
        using PipelineMessage message = CreateIncrementCountRequest(addend, options);
        return ClientResult.FromResponse(Pipeline.ProcessMessage(message, options));
    }

    /// <summary>
    /// [Protocol Method] IncrementCount
    /// <list type="bullet">
    /// <item>
    /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
    /// </item>
    /// </list>
    /// </summary>
    /// <param name="addend"></param>
    /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    /// <returns> The response returned from the service. </returns>
    public virtual async Task<ClientResult> IncrementCountAsync(int addend, RequestOptions? options)
    {
        using PipelineMessage message = CreateIncrementCountRequest(addend, options);
        return ClientResult.FromResponse(await Pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
    }

    /// <summary> IncrementCount. </summary>
    /// <param name="addend"></param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    public virtual ClientResult<int> IncrementCount(int addend, CancellationToken cancellationToken = default)
    {
        ClientResult result = IncrementCount(addend, cancellationToken.ToRequestOptions());
        return ClientResult.FromValue(result.GetRawResponse().Content.ToObjectFromJson<int>(), result.GetRawResponse());
    }

    /// <summary> IncrementCount. </summary>
    /// <param name="addend"></param>
    /// <param name="cancellationToken"> The cancellation token to use. </param>
    /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
    public virtual async Task<ClientResult<int>> IncrementCountAsync(int addend, CancellationToken cancellationToken = default)
    {
        ClientResult result = await IncrementCountAsync(addend, cancellationToken.ToRequestOptions()).ConfigureAwait(false);
        return ClientResult.FromValue(result.GetRawResponse().Content.ToObjectFromJson<int>(), result.GetRawResponse());
    }
}
